The aRead() and aWrite() here are special suspending functions — they suspend execution (which does not mean blocking the thread it has been running on) and resume when the call has completed. If we squint our eyes just enough to imagine that all the code after aRead() has been wrapped in a lambda and passed to aRead() as a callback, and the same has been done for aWrite(), we can see that this code is the same as above, only more readable.

It is our explicit goal to support coroutines in a very generic way, so in this example, async {}, File.aRead(), and File.aWrite() are just library functions geared for working with coroutines (details below): async is the coroutine builder — it marks the scope of a coroutine and starts it, while aRead/aWrite are special suspending functions which implicitly receive continuations (continuations are just generic callbacks).
